############################################################
# Projeto: Geoprocessamento de CEPs e Hexágonos - ES
# Autor: Bruno
# Data: Sys.Date()
# Objetivo:
#   1. Receber CEPs e converter para latitude/longitude
#   2. Associar CEPs aos municípios do Espírito Santo (IBGE)
#   3. Criar hexágonos cobrindo o estado
#   4. Exportar resultados em CSV e GeoJSON
#   5. Visualizar resultados
############################################################

#-----------------------------------------------------------
# 1. Carregar pacotes
#-----------------------------------------------------------
library(sf)           # Manipulação espacial
library(geobr)        # Limites geográficos oficiais IBGE
library(dplyr)        # Manipulação de dados
library(tidygeocoder) # Geocodificação CEP -> coordenadas

#-----------------------------------------------------------
# 2. Dataframe de CEPs de entrada (exemplo)
#-----------------------------------------------------------
df <- data.frame(
  id = 1:3,
  cep = c("29010010",  # Vitória
          "29102270",  # Vila Velha
          "29902555")  # Linhares
)

#-----------------------------------------------------------
# 3. Geocodificação usando via_cep (método correto)
#-----------------------------------------------------------
df_coords <- df %>%
  geocode(cep, method = "via_cep")

#-----------------------------------------------------------
# 4. Filtrar CEPs inválidos automaticamente
#-----------------------------------------------------------
ceps_invalidos <- df_coords %>%
  filter(is.na(lat) | is.na(long))

if(nrow(ceps_invalidos) > 0){
  message("Atenção! Alguns CEPs não foram encontrados e serão ignorados:")
  print(ceps_invalidos)
}

df_valid <- df_coords %>%
  filter(!is.na(lat) & !is.na(long))

#-----------------------------------------------------------
# 5. Criar objeto sf dos CEPs válidos
#-----------------------------------------------------------
df_sf <- st_as_sf(df_valid, coords = c("long", "lat"), crs = 4326)

#-----------------------------------------------------------
# 6. Baixar municípios do Espírito Santo
#-----------------------------------------------------------
munis_es_geo <- read_municipality(code_muni = "ES", year = 2024)

#-----------------------------------------------------------
# 7. Associar CEPs aos municípios
#-----------------------------------------------------------
df_municipios <- st_join(df_sf, munis_es_geo)

df_municipios_clean <- df_municipios %>%
  st_drop_geometry() %>%
  select(id, cep, lat, long, name_muni)

#-----------------------------------------------------------
# 8. Criar grade de hexágonos cobrindo o ES
#-----------------------------------------------------------
hex_grid <- st_make_grid(
  munis_es_geo,
  cellsize = 0.1,   # ajuste conforme necessário
  square = FALSE
) %>%
  st_sf()

hex_muni <- st_intersection(hex_grid, munis_es_geo)

#-----------------------------------------------------------
# 9. Exportar resultados
#-----------------------------------------------------------
write.csv(df_municipios_clean, "ceps_municipios_es.csv", row.names = FALSE)
st_write(hex_muni, "hexagonos_es.geojson", driver = "GeoJSON", delete_dsn = TRUE)

#-----------------------------------------------------------
# 10. Visualização no RStudio
#-----------------------------------------------------------
plot(st_geometry(munis_es_geo), col = "gray95", border = "black",
     main = "Municípios do ES + Hexágonos + CEPs")
plot(st_geometry(hex_grid), add = TRUE, border = "blue")
plot(st_geometry(df_sf), add = TRUE, col = "red", pch = 19)
